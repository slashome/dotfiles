" Display Settings
" ================
set encoding=utf8                          " utf8 everywhere
set t_Co=256                               " Enable 256 colors
syntax on                                  " Syntax highlighting on
syntax enable                              " Yep, really
if &term =~ '256color' | set t_ut= | endif " Disable Bac:kground Color Erase (tmux)

" Plugins
" =======
call plug#begin('~/.vim/plugged')
Plug 'thaerkh/vim-workspace'              " Session manager
"Plug 'xolox/vim-session'                  " Session manager - Sublime-Text project switcher alike
"Plug 'xolox/vim-misc'                     " Xolox plugin's shared library
Plug 'Raimondi/delimitMate'               " Autocomplete brackets
Plug 'SirVer/ultisnips'                   " Snippets
Plug 'airblade/vim-gitgutter'             " Show git status in the sidebar
Plug 'bling/vim-airline'                  " Status bar
Plug 'chriskempson/base16-vim'            " Color theme (note: I think alacritty is good enough for us, heh
Plug 'ctrlpvim/ctrlp.vim'                 " Fuzzy file search
Plug 'maralla/completor.vim'              " Autocomplete
Plug 'scrooloose/nerdtree'                " Tree Explorer
Plug 'sheerun/vim-polyglot'               " More language syntax highlighting
Plug 'terryma/vim-multiple-cursors'       " Enable sublime-style multi-cursors
Plug 'tpope/vim-abolish'                  " Enable finding / replacing word permutations
Plug 'tpope/vim-commentary'               " Add comments in blocks
Plug 'tpope/vim-repeat'                   " Repeat the last set of commands, rather than single command
Plug 'tpope/vim-surround'                 " Enable inserting brackets around words
Plug 'vim-airline/vim-airline-themes'     " Airline themes
Plug 'w0rp/ale'                           " Asynchronous linting engine
Plug 'autozimu/LanguageClient-neovim', {
\ 'branch': 'next',
\ 'do': 'bash install.sh',
\ }
call plug#end()

" General Config
" ==============
let mapleader=' '               " Set <Leader> to spacebar
set nonumber                    " Line numbers are good
set backspace=indent,eol,start  " Allow backspace in insert mode
set history=1000                " Store lots of :cmdline history
set showcmd                     " Show incomplete cmds down the bottom
set showmode                    " Show current mode down the bottom
set gcr=a:blinkon0              " Disable cursor blink
set autoread                    " Reload files changed outside vim
set laststatus=2                " Always show status line
set clipboard=unnamed           " Use system clipboard
set hidden                      " Buffers can exist in the background
set splitright                  " Opens vertical split right of current window
set splitbelow                  " Opens horizontal split below current window
set shell=/bin/bash             " Run commands in bash
set whichwrap+=<,>,[,]

" Clipboard
" =========
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <C-r><C-o>+"

" Colors
" ======
hi Search cterm=NONE ctermfg=black ctermbg=yellow

" Mouse
" ======
set ttyfast " Send more characters for redraws
set mouse=a " Enable mouse use in all modes

" Search Settings
" ===============
set incsearch        " Find the next match as we type the search
set hlsearch         " Hilight searches by default
set viminfo='100,f1  " Save up to 100 marks, enable capital marks

" Turn Off Swap Files
" ===================
set noswapfile                " Disable .swp files
set nobackup                  " Disable ~ backup files
set nowritebackup             " No really
set backupdir=/var/tmp,/tmp   " But if you do, write it here
set directory=/var/tmp,/tmp   " Or here

" Indentation and Display
" =======================
filetype plugin on
filetype indent on
set autoindent       " We've automated our indentation, and now there's fewer jobs
set smartindent      " Indents didn't drop out of high school. High five
set smarttab         " Tabs with a PhD
set shiftwidth=2     " Tabs are now 2 width long
set softtabstop=2
set tabstop=2
set expandtab
set colorcolumn=81   " Show a marker at 80+1 chars
set nowrap           " Don't wrap lines
set linebreak        " Wrap lines at convenient points
set formatoptions+=j " Auto collapse comments
set textwidth=80     " Show gutter at 80 chars

" File Extension Aliases
" ======================
au BufRead,BufNewFile *.md set filetype=markdown
augroup markdown
  au!
  autocmd Syntax markdown setlocal wm=2
augroup END

" Auto Commands
" =============
autocmd! BufWritePost vimrc so ~/.vimrc"  " Automatically reload vimrc when it's saved

" Completion
" ==========
set wildmode=longest,list,full
set wildmenu                    " Enable ctrl-n and ctrl-p to scroll through matches
set wildignore=*.o,*.obj,*~     " Stuff to ignore when tab completing
set wildignore+=*vim/backups*

" Scrolling
" =========
" Start scrolling when we're getting close to margins
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" Airline Plugin
" ==============
let g:airline_powerline_fonts = 0
let g:airline_theme = 'base16_eighties'
if !exists('g:airline_symbols') | let g:airline_symbols = {} | endif
let g:airline_section_b = ''
let g:airline_section_z = airline#section#create(['%l:%c:%L'])
let g:airline_left_sep = ''
let g:airline_right_sep = ''
" let g:airline_symbols.branch = '⎇'
" let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.whitespace = 'Ξ'
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#ale#enabled = 1

" Nerdtree
" ========
map <C-_> :NERDTreeToggle<CR>

" Git Gutter Plugin
" =================
set signcolumn=yes
let g:gitgutter_eager = 0
let g:gitgutter_override_sign_column_highlight = 0
highlight Comment ctermbg=black
highlight SignColumn ctermbg=black

" Ctrlp Plugin
" ============
map <Leader>e :CtrlPBuffer<CR>
if executable('ag')
  let g:ctrlp_user_command = 'ag %s --files-with-matches -g "" --ignore "\.git$\|\.hg$\|\.svn$"'
  let g:ctrlp_use_caching = 0
endif

" Ale Plugin
" ==========
let g:ale_lint_on_text_changed = 'never' " Only lint when text is saved.
let g:ale_completion_enabled = 1         " Enable completion where enabled.
let g:ale_set_highlights = 1             " Highlight code in file.
let g:ale_set_quickfix = 1               " Use the quicklist buffer.
let g:ale_set_loclist = 0                " Don't use loclist.
let g:ale_fix_on_save = 1                " Auto fix js.
let g:ale_open_list = 1                  " Auto open quicklist buffer.
let g:ale_fixers = {
\   'javascript': []
\}
let g:ale_linters = {
\   'javascript': ['standard'],
\}
highlight ALEStyleWarning ctermfg=Black
highlight ALEStyleWarning ctermbg=Yellow
highlight ALEWarning ctermfg=Black
highlight ALEWarning ctermbg=Yellow
highlight ALEStyleError ctermfg=Black
highlight ALEStyleError ctermbg=Red
highlight ALEError ctermfg=Black
highlight ALEError ctermbg=Red

" " Completor Plugin
" " ================
" let g:completor_node_binary = '/home/anon/.nvm/versions/node/v9.3.0/bin/node'
" let g:completor_racer_binary = '/home/anon/.cargo/bin/racer'
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <cr> pumvisible() ? "\<C-y>\<space>" : "\<cr>"

" Language Server
" ================
" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
\ 'rust': ['rustup', 'run', 'nightly', 'rls'],
\ 'javascript': ['javascript-typescript-stdio']
\ }

nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
let g:LanguageClient_loggingLevel = 'DEBUG'

" Rust.vim
" ========
augroup filetype_rust
  autocmd!
  autocmd BufReadPost *.rs setlocal filetype=rust
augroup END
let g:rustfmt_autosave = 1
let g:rust_recommended_style = 0
au FileType rust setl sw=2 sts=2 et
au BufRead,BufNewFile *.rs set filetype=rust

" Utilities
" ================
" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %
" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv